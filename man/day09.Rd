% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day09.R
\name{day09}
\alias{day09}
\alias{get_marble_high_score}
\alias{run_marbles}
\alias{run_marbles_c}
\alias{parse_marble_description}
\alias{wrap_around2}
\title{Day 09: Marble Mania}
\usage{
get_marble_high_score(marble_history)

run_marbles(players, marbles)

run_marbles_c(players, marbles)

parse_marble_description(x)

wrap_around2(xs, y)
}
\arguments{
\item{marble_history}{a dataframe as returned by
\code{run_marbles(players, marbles)} with the history of scoring turns in the
marble game.}

\item{players, marbles}{the numbers of players and marbles, as returned by
\code{parse_marble_description(x)}}

\item{x}{sentence like the puzzle input descriping the number of players and
value of the last marble}

\item{xs}{positions in a circular vector}

\item{y}{a circular vector}
}
\value{
For Parts One and Two, \code{parse_marble_description(x)} returns a list
with an element \code{players} for the number of players and an element
\code{marbles} with the number of marbles that need to be played.
\code{run_marbles(players, marbles)} simulates the game and return a dataframe
with one row per scoring turn. \code{run_marbles_c(players, marbles)} is an
alternative version written in C++ for speed.
\code{get_marble_high_score(marble_history)} returns the score of the highest
scoring player in a game. The helper function \code{wrap_around2(xs, y)} handles
the details of wrapping positions \code{xs} around a circular vector \code{y}.
}
\description{
\href{https://adventofcode.com/2018/day/9}{Marble Mania}
}
\details{
\strong{Part One}

You talk to the Elves while you wait for your navigation system to
[initialize]{title="Do you have any idea how long it takes to load navigation data for all of time and space?!"}.
To pass the time, they introduce you to their favorite
\href{https://en.wikipedia.org/wiki/Marble_(toy)}{marble} game.

The Elves play this game by taking turns arranging the marbles in a
\emph{circle} according to very particular rules. The marbles are numbered
starting with \code{0} and increasing by \code{1} until every marble has a number.

First, the marble numbered \code{0} is placed in the circle. At this point,
while it contains only a single marble, it is still a circle: the marble
is both clockwise from itself and counter-clockwise from itself. This
marble is designated the \emph{current marble}.

Then, each Elf takes a turn placing the \emph{lowest-numbered remaining
marble} into the circle between the marbles that are \code{1} and \code{2} marbles
\emph{clockwise} of the current marble. (When the circle is large enough,
this means that there is one marble between the marble that was just
placed and the current marble.) The marble that was just placed then
becomes the \emph{current marble}.

However, if the marble that is about to be placed has a number which is
a multiple of \code{23}, \emph{something entirely different happens}. First, the
current player keeps the marble they would have placed, adding it to
their \emph{score}. In addition, the marble \code{7} marbles \emph{counter-clockwise}
from the current marble is \emph{removed} from the circle and \emph{also} added to
the current player's score. The marble located immediately \emph{clockwise}
of the marble that was removed becomes the new \emph{current marble}.

For example, suppose there are 9 players. After the marble with value
\code{0} is placed in the middle, each player (shown in square brackets)
takes a turn. The result of each of those turns would produce circles of
marbles like this, where clockwise is to the right and the resulting
current marble is in parentheses:\preformatted{[-] (0)
[1]  0 (1)
[2]  0 (2) 1
[3]  0  2  1 (3)
[4]  0 (4) 2  1  3
[5]  0  4  2 (5) 1  3
[6]  0  4  2  5  1 (6) 3
[7]  0  4  2  5  1  6  3 (7)
[8]  0 (8) 4  2  5  1  6  3  7
[9]  0  8  4 (9) 2  5  1  6  3  7
[1]  0  8  4  9  2(10) 5  1  6  3  7
[2]  0  8  4  9  2 10  5(11) 1  6  3  7
[3]  0  8  4  9  2 10  5 11  1(12) 6  3  7
[4]  0  8  4  9  2 10  5 11  1 12  6(13) 3  7
[5]  0  8  4  9  2 10  5 11  1 12  6 13  3(14) 7
[6]  0  8  4  9  2 10  5 11  1 12  6 13  3 14  7(15)
[7]  0(16) 8  4  9  2 10  5 11  1 12  6 13  3 14  7 15
[8]  0 16  8(17) 4  9  2 10  5 11  1 12  6 13  3 14  7 15
[9]  0 16  8 17  4(18) 9  2 10  5 11  1 12  6 13  3 14  7 15
[1]  0 16  8 17  4 18  9(19) 2 10  5 11  1 12  6 13  3 14  7 15
[2]  0 16  8 17  4 18  9 19  2(20)10  5 11  1 12  6 13  3 14  7 15
[3]  0 16  8 17  4 18  9 19  2 20 10(21) 5 11  1 12  6 13  3 14  7 15
[4]  0 16  8 17  4 18  9 19  2 20 10 21  5(22)11  1 12  6 13  3 14  7 15
[5]  0 16  8 17  4 18(19) 2 20 10 21  5 22 11  1 12  6 13  3 14  7 15
[6]  0 16  8 17  4 18 19  2(24)20 10 21  5 22 11  1 12  6 13  3 14  7 15
[7]  0 16  8 17  4 18 19  2 24 20(25)10 21  5 22 11  1 12  6 13  3 14  7 15
}

The goal is to be the \emph{player with the highest score} after the last
marble is used up. Assuming the example above ends after the marble
numbered \code{25}, the winning score is \code{23+9=32} (because player 5 kept
marble \code{23} and removed marble \code{9}, while no other player got any points
in this very short example game).

Here are a few more examples:
\itemize{
\item \code{10} players; last marble is worth \code{1618} points: high score is
\emph{\code{8317}}
\item \code{13} players; last marble is worth \code{7999} points: high score is
\emph{\code{146373}}
\item \code{17} players; last marble is worth \code{1104} points: high score is
\emph{\code{2764}}
\item \code{21} players; last marble is worth \code{6111} points: high score is
\emph{\code{54718}}
\item \code{30} players; last marble is worth \code{5807} points: high score is
\emph{\code{37305}}
}

\emph{What is the winning Elf's score?}

\strong{Part Two}

Amused by the speed of your answer, the Elves are curious:

\emph{What would the new winning Elf's score be if the number of the last
marble were 100 times larger?}
}
\examples{
"10 players; last marble is worth 1618 points: high score is 8317" \%>\%
  parse_marble_description() \%>\%
  do.call(run_marbles, .) \%>\%
  get_marble_high_score()

# 0 is position 1
# 7 is first position (wrapped around 1 time)
# -1 is the last element (wrapped around backwards)
setNames(wrap_around2(-10:10, 1:6), -10:10)
}
