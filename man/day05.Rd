% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day05.R
\name{day05}
\alias{day05}
\alias{create_polymer}
\alias{run_polymer_reaction}
\alias{simulate_polymer_reactions}
\title{Day 05: Alchemical Reduction}
\usage{
create_polymer(x)

run_polymer_reaction(x, verbose = FALSE)

simulate_polymer_reactions(x)
}
\arguments{
\item{x}{a string describing a polymer}

\item{verbose}{whether to print out the each step of the polymer simulation}
}
\value{
For Part One, \code{create_polymer(x)} returns a polymer object that can
run a reaction. \code{run_polymer_reaction(x)} returns the polymer after all
reactions are finished. For Part Two, \code{simulate_polymer_reactions(x)}
returns a list with the length of the polymer after removing each unit and
letting the resulting polymer react.
}
\description{
\href{https://adventofcode.com/2018/day/5}{Alchemical Reduction}
}
\details{
\strong{Part One}

You've managed to sneak in to the prototype suit manufacturing lab. The
Elves are making decent progress, but are still struggling with the
suit's size reduction capabilities.

While the very latest in 1518 alchemical technology might have solved
their problem eventually, you can do better. You scan the chemical
composition of the suit's material and discover that it is formed by
extremely long \href{https://en.wikipedia.org/wiki/Polymer}{polymers} (one of
which is [available]{title="I've always wanted a polymer!"} as your
puzzle input).

The polymer is formed by smaller \emph{units} which, when triggered, react
with each other such that two adjacent units of the same type and
opposite polarity are destroyed. Units' types are represented by
letters; units' polarity is represented by capitalization. For instance,
\code{r} and \code{R} are units with the same type but opposite polarity, whereas
\code{r} and \code{s} are entirely different types and do not react.

For example:
\itemize{
\item In \code{aA}, \code{a} and \code{A} react, leaving nothing behind.
\item In \code{abBA}, \code{bB} destroys itself, leaving \code{aA}. As above, this then
destroys itself, leaving nothing.
\item In \code{abAB}, no two adjacent units are of the same type, and so
nothing happens.
\item In \code{aabAAB}, even though \code{aa} and \code{AA} are of the same type, their
polarities match, and so nothing happens.
}

Now, consider a larger example, \code{dabAcCaCBAcCcaDA}:\preformatted{dabAcCaCBAcCcaDA  The first 'cC' is removed.
dabAaCBAcCcaDA    This creates 'Aa', which is removed.
dabCBAcCcaDA      Either 'cC' or 'Cc' are removed (the result is the same).
dabCBAcaDA        No further actions can be taken.
}

After all possible reactions, the resulting polymer contains \emph{10 units}.

\emph{How many units remain after fully reacting the polymer you scanned?}
[(Note: in this puzzle and others, the input is large; if you copy/paste
your input, make sure you get the whole thing.)]{.quiet}

\strong{Part Two}

Time to improve the polymer.

One of the unit types is causing problems; it's preventing the polymer
from collapsing as much as it should. Your goal is to figure out which
unit type is causing the most problems, remove all instances of it
(regardless of polarity), fully react the remaining polymer, and measure
its length.

For example, again using the polymer \code{dabAcCaCBAcCcaDA} from above:
\itemize{
\item Removing all \code{A}/\code{a} units produces \code{dbcCCBcCcD}. Fully reacting
this polymer produces \code{dbCBcD}, which has length 6.
\item Removing all \code{B}/\code{b} units produces \code{daAcCaCAcCcaDA}. Fully reacting
this polymer produces \code{daCAcaDA}, which has length 8.
\item Removing all \code{C}/\code{c} units produces \code{dabAaBAaDA}. Fully reacting
this polymer produces \code{daDA}, which has length 4.
\item Removing all \code{D}/\code{d} units produces \code{abAcCaCBAcCcaA}. Fully reacting
this polymer produces \code{abCBAc}, which has length 6.
}

In this example, removing all \code{C}/\code{c} units was best, producing the
answer \emph{4}.

\emph{What is the length of the shortest polymer you can produce} by removing
all units of exactly one type and fully reacting the result?
}
\examples{
p <- create_polymer("dabAcCaCBAcCcaDA")
p$run_reaction()
# or
run_polymer_reaction("dabAcCaCBAcCcaDA")
run_polymer_reaction("dabAcCaCBAcCcaDA", verbose = TRUE)

simulate_polymer_reactions(x)
}
