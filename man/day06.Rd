% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day06.R
\name{day06}
\alias{day06}
\alias{read_beacon_coordinates}
\alias{search_grid_around_beacons}
\alias{measure_finite_beacon_areas}
\alias{search_grid_for_safe_regions}
\alias{measure_safe_area}
\title{Day 06: Chronal Coordinates}
\usage{
read_beacon_coordinates(lines)

search_grid_around_beacons(df_beacons, pad = 1)

measure_finite_beacon_areas(area_grid)

search_grid_for_safe_regions(df_beacons, threshold, pad = 1)

measure_safe_area(safe_grid)
}
\arguments{
\item{lines}{character vector with problem input. Each string in the vector
should a be coordinate.}

\item{df_beacons}{a dataframe created by \code{read_beacon_coordinates()}}

\item{pad}{integer indicating how far north, east, south, west of the beacons
to go when making the grid.}

\item{area_grid}{a matrix created by \code{search_grid_around_beacons()}}

\item{threshold}{a point is safe when the total distance between the point
and all the beacons is less than the threshold}

\item{safe_grid}{a matrix created by \code{search_grid_for_safe_regions()}}
}
\value{
For Part One, \code{read_beacon_coordinates(lines)} returns a dataframe
with the problem input. \code{search_grid_around_beacons(df_beacon)} returns a
matrix of the grid described by the problem input. The value of each cell
is the labels of the nearest beacon or \code{"."} in the case of ties.
\code{measure_finite_beacon_areas(area_grid)} returns a list of the
beacon-areas. The keys (names) in the list are the labels of the beacons
and the values are the finite areas.... For Part Two,
\code{search_grid_for_safe_regions(df_beacon, threshold)} returns a matrix of
the grid described by the problem input. The cell is in the safe region if
its value is \code{"#"}. Otherwises, its value is \code{"."}.
\code{measure_safe_area(safe_grid)} returns a list with the size of the \code{"#"} in
the grid.
}
\description{
\href{https://adventofcode.com/2018/day/6}{Chronal Coordinates}
}
\details{
\strong{Part One}

The device on your wrist beeps several times, and once again you feel
like you're falling.

"[Situation
critical]{title="Why is the situation always critical? Why can't the situation just be boring for once?"},"
the device announces. "Destination indeterminate. Chronal interference
detected. Please specify new target coordinates."

The device then produces a list of coordinates (your puzzle input). Are
they places it thinks are safe or dangerous? It recommends you check
manual page 729. The Elves did not give you a manual.

\emph{If they're dangerous,} maybe you can minimize the danger by finding
the coordinate that gives the largest distance from the other points.

Using only the \href{https://en.wikipedia.org/wiki/Taxicab_geometry}{Manhattan distance}, determine the
\emph{area} around each coordinate by counting the number of
\href{https://en.wikipedia.org/wiki/Integer}{integer} X,Y locations that are
\emph{closest} to that coordinate (and aren't \emph{tied in distance} to any
other coordinate).

Your goal is to find the size of the \emph{largest area} that isn't
infinite. For example, consider the following list of coordinates:\preformatted{1, 1
1, 6
8, 3
3, 4
5, 5
8, 9
}

If we name these coordinates \code{A} through \code{F}, we can draw them on a
grid, putting \code{0,0} at the top left:\preformatted{..........
.A........
..........
........C.
...D......
.....E....
.B........
..........
..........
........F.
}

This view is partial - the actual grid extends infinitely in all
directions. Using the Manhattan distance, each location's closest
coordinate can be determined, shown here in lowercase:\preformatted{aaaaa.cccc
aAaaa.cccc
aaaddecccc
aadddeccCc
..dDdeeccc
bb.deEeecc
bBb.eeee..
bbb.eeefff
bbb.eeffff
bbb.ffffFf
}

Locations shown as \code{.} are equally far from two or more coordinates, and
so they don't count as being closest to any.

In this example, the areas of coordinates A, B, C, and F are infinite -
while not shown here, their areas extend forever outside the visible
grid. However, the areas of coordinates D and E are finite: D is closest
to 9 locations, and E is closest to 17 (both including the coordinate's
location itself). Therefore, in this example, the size of the largest
area is \emph{17}.

\emph{What is the size of the largest area} that isn't infinite?

\strong{Part Two}

On the other hand, \emph{if the coordinates are safe}, maybe the best you can
do is try to find a \emph{region} near as many coordinates as possible.

For example, suppose you want the sum of the \href{https://en.wikipedia.org/wiki/Taxicab_geometry}{Manhattan distance} to all of the
coordinates to be \emph{less than 32}. For each location, add up the
distances to all of the given coordinates; if the total of those
distances is less than 32, that location is within the desired region.
Using the same coordinates as above, the resulting region looks like
this:\preformatted{..........
.A........
..........
...###..C.
..#D###...
..###E#...
.B.###....
..........
..........
........F.
}

In particular, consider the highlighted location \code{4,3} located at the
top middle of the region. Its calculation is as follows, where \code{abs()}
is the \href{https://en.wikipedia.org/wiki/Absolute_value}{absolute value}
function:
\itemize{
\item Distance to coordinate A: \code{abs(4-1) + abs(3-1) =  5}
\item Distance to coordinate B: \code{abs(4-1) + abs(3-6) =  6}
\item Distance to coordinate C: \code{abs(4-8) + abs(3-3) =  4}
\item Distance to coordinate D: \code{abs(4-3) + abs(3-4) =  2}
\item Distance to coordinate E: \code{abs(4-5) + abs(3-5) =  3}
\item Distance to coordinate F: \code{abs(4-8) + abs(3-9) = 10}
\item Total distance: \code{5 + 6 + 4 + 2 + 3 + 10 = 30}
}

Because the total distance to all coordinates (\code{30}) is less than 32,
the location is \emph{within} the region.

This region, which also includes coordinates D and E, has a total size
of \emph{16}.

Your actual region will need to be much larger than this example,
though, instead including all locations with a total distance of less
than \emph{10000}.

\emph{What is the size of the region containing all locations which have a
total distance to all given coordinates of less than 10000?}
}
\note{
I call the "coordinates" \emph{beacons} to clarify my
conceptualization of the problem.
}
\examples{
lines <- "
  1, 1
  1, 6
  8, 3
  3, 4
  5, 5
  8, 9"

df <- lines \%>\%
  read_text_lines() \%>\%
  read_beacon_coordinates()

# Match labels of description
df$label <- LETTERS[as.integer(df$label)]

grid <- search_grid_around_beacons(df)
measure_finite_beacon_areas(grid)

safe_grid <- search_grid_for_safe_regions(df, 32)
safe_grid

measure_safe_area(safe_grid)
}
