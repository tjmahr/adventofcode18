% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day02.R
\name{day02}
\alias{day02}
\alias{checksum_box_id}
\alias{find_one_character_neighbors}
\title{Day 02: Inventory Management System}
\usage{
checksum_box_id(x)

find_one_character_neighbors(x)
}
\arguments{
\item{x}{a character vector of box IDs to checksum}
}
\value{
For part one, the number of IDs with exactly 2 characters times
number with exactly 3 characters. For part two, the characters shared by
the two items that share all but one character.
}
\description{
\href{https://adventofcode.com/2018/day/2}{Inventory Management System}
}
\details{
\strong{Part One}

You stop falling through time, catch your breath, and check the screen
on the device. "Destination reached. Current Year: 1518. Current
Location: North Pole Utility Closet 83N10." You made it! Now, to find
those anomalies.

Outside the utility closet, you hear footsteps and a voice. "...I'm not
sure either. But now that [so many people have
chimneys]{title="This is, in fact, roughly when chimneys became common in houses."},
maybe he could sneak in that way?" Another voice responds, "Actually,
we've been working on a new kind of \emph{suit} that would let him fit
through tight spaces like that. But, I heard that a few days ago, they
lost the prototype fabric, the design plans, everything! Nobody on the
team can even seem to remember important details of the project!"

"Wouldn't they have had enough fabric to fill several boxes in the
warehouse? They'd be stored together, so the box IDs should be similar.
Too bad it would take forever to search the warehouse for \emph{two similar
box IDs}..." They walk too far away to hear any more.

Late at night, you sneak to the warehouse - who knows what kinds of
paradoxes you could cause if you were discovered - and use your fancy
wrist device to quickly scan every box and produce a list of the likely
candidates (your puzzle input).

To make sure you didn't miss any, you scan the likely candidate boxes
again, counting the number that have an ID containing \emph{exactly two of
any letter} and then separately counting those with \emph{exactly three of
any letter}. You can multiply those two counts together to get a
rudimentary \href{https://en.wikipedia.org/wiki/Checksum}{checksum} and
compare it to what your device predicts.

For example, if you see the following box IDs:
\itemize{
\item \code{abcdef} contains no letters that appear exactly two or three times.
\item \code{bababc} contains two \code{a} and three \code{b}, so it counts for both.
\item \code{abbcde} contains two \code{b}, but no letter appears exactly three
times.
\item \code{abcccd} contains three \code{c}, but no letter appears exactly two
times.
\item \code{aabcdd} contains two \code{a} and two \code{d}, but it only counts once.
\item \code{abcdee} contains two \code{e}.
\item \code{ababab} contains three \code{a} and three \code{b}, but it only counts once.
}

Of these box IDs, four of them contain a letter which appears exactly
twice, and three of them contain a letter which appears exactly three
times. Multiplying these together produces a checksum of \code{4 * 3 = 12}.

\emph{What is the checksum} for your list of box IDs?

\strong{Part Two}

Confident that your list of box IDs is complete, you're ready to find
the boxes full of prototype fabric.

The boxes will have IDs which differ by exactly one character at the
same position in both strings. For example, given the following box IDs:\preformatted{abcde
fghij
klmno
pqrst
fguij
axcye
wvxyz
}

The IDs \code{abcde} and \code{axcye} are close, but they differ by two characters
(the second and fourth). However, the IDs \code{fghij} and \code{fguij} differ by
exactly one character, the third (\code{h} and \code{u}). Those must be the
correct boxes.

\emph{What letters are common between the two correct box IDs?} (In the
example above, this is found by removing the differing character from
either ID, producing \code{fgij}.)
}
\examples{
x <- c("abcdef", "bababc", "abbcde", "abcccd",
       "aabcdd", "abcdee", "ababab")
checksum_box_id(x)
x <- c("abcde", "fghij", "klmno", "pqrst",
       "fguij", "axcye", "wvxyz")
find_one_character_neighbors(x)
}
